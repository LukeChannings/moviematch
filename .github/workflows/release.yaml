# Release Process:

# 1. Update RELEASE_NOTES.markdown and bump VERSION
# 2. Create a release with the same text as VERSION plus a `v` prefix
# 3. This workflow with kick in and build a Docker image and upload binaries to the release

name: Release

on:
  push:
    tags:
      - "v2*"
  workflow_dispatch:
    inputs:
      version:
        description: Version
        required: true

env:
  DENO_VERSION: 1.11.3

jobs:
  build_info:
    name: Get build info
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.metadata.outputs.version }}
      prerelease: ${{ steps.metadata.outputs.prerelease }}
      existing_release: ${{ steps.metadata.outputs.existing_release }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Get metadata
        id: metadata
        run: |
          export VERSION="${{ github.event.inputs.version || github.ref }}"
          VERSION="${VERSION#refs/tags/v}"
          echo "::set-output name=version::${VERSION}"
          PRERELEASE="$([[ "$VERSION" == *"alpha"* ]] || [[ "$VERSION" == *"beta"* ]] && echo "true" || echo "false")"
          echo "::set-output name=prerelease::${PRERELEASE}"
          response=$(curl -s -H "Accept: application/json" https://api.github.com/repos/lukechannings/moviematch/releases)
          EXISTING_RELEASE=$( [[ "$(echo $response | jq ".[]|select(.tag_name==\"${VERSION}\")")" == "" ]] && echo "false" || echo "true" )
          echo "::set-output name=existing_release::${EXISTING_RELEASE}"
      - name: Check we're building the right version
        run: |
          if [[ "$(cat VERSION)" != "${{steps.metadata.outputs.version}}" ]]; then
            echo "Tag version is "${{steps.metadata.outputs.version}}", but the source code version is "$(cat VERSION)". These need to match!"
            exit 1
          fi
        shell: bash
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: build_info
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Setup Deno
        uses: denolib/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}
      - name: Setup Just
        uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - run: just install
        name: Install dependencies
      - name: Lint
        run: just lint
      - name: Unit tests
        run: just test
        env:
          TEST_PLEX_URL: ${{ secrets.TEST_PLEX_URL }}
          TEST_PLEX_TOKEN: ${{ secrets.TEST_PLEX_TOKEN }}
      - name: Compile MovieMatch
        run: just build-binary all
      - name: Get Release Notes
        run: |
          RELEASE_NOTES=$(deno eval -p "(await Deno.readTextFile('./RELEASE_NOTES.markdown')).match(/##\sv${{needs.build_info.outputs.version}}(?<notes>(.|\n)*?)^##\s/m)?.groups?.notes?.trim() ?? ''")
          echo "${RELEASE_NOTES}" > build/RELEASE_NOTES.markdown
      - uses: actions/upload-artifact@v2
        with:
          name: build
          path: ./build
          retention-days: 1
  e2e-tests:
    name: E2E Tests (${{matrix.name}})
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: linux-amd64
            os: ubuntu-latest
            name: Linux
          - target: macos-amd64
            os: macos-latest
            name: macOS
          - target: windows-amd64
            os: windows-latest
            name: Windows
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Setup Deno
        uses: denolib/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}
      - name: Setup Just
        uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/download-artifact@v2
        with:
          name: build
          path: build
      - name: Run end-to-end tests
        run: |
          just install-deno-dependencies
          just test-e2e ${{ matrix.target }}
        env:
          PLEX_URL: ${{ secrets.TEST_PLEX_URL }}
          PLEX_TOKEN: ${{ secrets.TEST_PLEX_TOKEN }}
      - uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: screenshots-${{ matrix.os }}
          path: ./screenshots
          retention-days: 1
  release_github:
    name: Release (GitHub)
    runs-on: ubuntu-latest
    needs:
      - e2e-tests
      - build_info
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: build
          path: build
      - name: Create Release
        id: create_release
        if: ${{ needs.build_info.outputs.existing_release == 'false' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ needs.build_info.outputs.version }}"
          release_name: "v${{ needs.build_info.outputs.version }}"
          body_path: ./build/RELEASE_NOTES.markdown
          prerelease: ${{ needs.build_info.outputs.prerelease == 'true' }}
      - name: Upload binaries
        run: |
          set -x
          targets=("linux-amd64" "linux-arm64" "macos-amd64" "macos-arm64" "windows-amd64")
          assets=("-a" "./build/moviematch.js")
          for target in ${targets[*]}; do
            zip -r -j "./build/${target}.zip" ./build/${target}/*
            assets+=("-a" "./build/${target}.zip")
          done
          hub release edit "${assets[@]}" -m "v${{ needs.build_info.outputs.version }}" "v${{ needs.build_info.outputs.version }}" || true
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: dev-drprasad/delete-tag-and-release@v0.2.0
        if: ${{ failure() }}
        with:
          delete_release: true
          tag_name: v${{ needs.build_info.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  release_docker:
    name: Release (Docker)
    runs-on: ubuntu-latest
    needs:
      - e2e-tests
      - build_info
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: build
          path: build
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & Push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./configs/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            VERSION=v${{needs.build_info.outputs.version}}
          tags: |
            lukechannings/moviematch:${{ needs.build_info.outputs.version }}
            ${{ needs.build_info.outputs.prerelease == 'false' && 'lukechannings/moviematch:latest' || 'lukechannings/moviematch:develop' }}
